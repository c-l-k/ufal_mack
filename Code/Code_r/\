# Autor: AAB    versão 1.0 data: 14/11/2018
# O programa le uma imagem 400 X 400 (canais hh, hv e vv) encontra a funcao l(j) para cada linha da imagem, e calcula o ponto de max/min (evidencia de borda) pelo método GenSA.
# O programa imprime um vetor de tamanho 400 com as evidencias de bordas para cada linha da imagem em uma arquivo *.txt
# obs: 1) Trocar os canais nos arquivos de entrada e saida.
#      2) Progama preparado para rodar amostras em duas metades com sigmas propostos me \cite{nhfc} e \cite{gamf}.
#      3) Desabilitei o print em arquivo depois de rodar os testes de interesse com o intuito de não modificar arquivos indevidamente.
rm(list = ls())
require(ggplot2)
require(latex2exp)
require(GenSA)
require(maxLik)
#
source("func_obj_l_L_mu_produto.r")
# Programa principal
setwd("../..")
setwd("Data")
# canais hh, hv, and vv
mat1 <- scan('real_flevoland_1.txt')
mat2 <- scan('real_flevoland_2.txt')
setwd("..")
setwd("Code/Code_r")
mat1 <- matrix(mat1, ncol = 120, byrow = TRUE)
mat2 <- matrix(mat2, ncol = 120, byrow = TRUE)
d <- dim(mat1)
nrows <- d[1]
ncols <- d[2]
N  = ncols
# Loop para toda a imagem
matdf1 <- matrix(0, nrow = N, ncol = 2)
matdf2 <- matrix(0, nrow = N, ncol = 2)
evidencias          <- rep(0, nrows)
evidencias_valores  <- rep(0, nrows)
xev  <- seq(1, nrows, 1 )
#for (k in 1 : nrows){# j aqui varre o número de radiais
for (k in 1 : 1){# j aqui varre o número de radiais
         print(k)
	N <- ncols
	z  <- rep(0, N)
	z1 <- rep(0, N)
	z2 <- rep(0, N)
        z1 <- mat1[k, 1: N] 
        z2 <- mat2[k, 1: N]
	conta = 0
  	for (i in 1 : N){
	  if (z2[i] > 0){
          	conta <- conta + 1
		z[conta] <- (z1[i] * z2[i]) /  sqrt(z1[1]^2 * z2[i]^2)
	  }
	}
	indx  <- which(z != 0)
	N <- floor(max(indx))
	matdf1 <- matrix(0, nrow = N, ncol = 2)
	matdf2 <- matrix(0, nrow = N, ncol = 2)
	#matsig <- matrix(0, nrow = N, ncol = 4)
	for (j in 1 : N ){
	  loglike <- function(param) {
	    L    <- param[1]
	    rho  <- param[2]
	    aux1 <-  log(4)
	    aux2 <-  (L + 1) * log(L)
	    sigma1 <- sum(log(z[1: j])) / j
	    aux3 <-  L * sigma1
	    aux4 <-  log(gamma(L))
	    aux5 <-  log(1 - abs(rho)^2)
	    arg1 <- (2 * abs(rho) * L ) / (1 - abs(rho)^2)
	    sigma2 <- sum(log(besselI(arg1 * z[1: j], 0))) / j
	    aux6 <-   sigma2
	    arg2 <- (2 * L) / (1 - abs(rho)^2)
	    sigma3 <- sum(log(besselK(arg2 * z[1: j], L - 1))) / j
	    aux7 <-  sigma3 
	    ll <- aux1 + aux2 + aux3 - aux4 - aux5 + aux6 + aux7 
	    ll
	  }
	  loglikd <- function(param) {
	    L <- param[1]
	    rho <- param[2]
	    aux1 <-  log(4)
	    aux2 <-  (L + 1) * log(L)
	    sigma1 <- sum(log(z[(j + 1): N])) / (N - j)
	    aux3 <-  L * sigma1
	    aux4 <-  log(gamma(L))
	    aux5 <-  log(1 - abs(rho)^2)
	    arg1 <- (2 * abs(rho) * L ) / (1 - abs(rho)^2)
	    sigma2 <- sum(log(besselI(arg1 * z[(j + 1): N], 0))) / (N - j)
	    aux6 <-   sigma2
	    arg2 <- (2 * L) / (1 - abs(rho)^2)
	    sigma3 <- sum(log(besselK(arg2 * z[(j + 1): N], L - 1))) / (N - j)
	    aux7 <-  sigma3 
	    ll <- aux1 + aux2 + aux3 - aux4 - aux5 + aux6 + aux7 
	    ll
	  }
	  r1 <- runif(1, 0, 10)
	  r2 <- runif(1, 0, 1)
	  res1 <- maxBFGS(loglike, start=c(r1, r2))
	  r1 <- runif(1, 0, 10)
	  r2 <- runif(1, 0, 1)
	  res2 <- maxBFGS(loglikd, start=c(r1, r2))
	  matdf1[j, 1] <- res1$estimate[1]
	  matdf1[j, 2] <- res1$estimate[2]
	  if (j < N){
	    matdf2[j, 1] <- res2$estimate[1]
	    matdf2[j, 2] <- res2$estimate[2]
	  }
	}
	temp  <- sample(1: N, 1)
	lower <- 1 
	upper <- N
	out   <- GenSA(lower = lower, upper = upper, fn = func_obj_l_L_mu_produto, control=list( maxit =100, temperature = temp))
	evidencias[k] <- out$par
	evidencias_valores[k] <- out$value
}
x <- seq(N - 1)
lobj <- rep(0, (N - 1))
for (j in 1 : (N - 1) ){
  lobj[j] <- func_obj_l_L_mu_produto(j)
}
df <- data.frame(x, lobj)
p <- ggplot(df, aes(x = x, y = lobj, color = 'darkred')) + geom_line() + xlab(TeX('Pixel $j$')) + ylab(TeX('$l(j)$')) + guides(color=guide_legend(title=NULL)) + scale_color_discrete(labels= lapply(sprintf('$\\sigma_{hh} = %2.0f$', NULL), TeX))
print(p)
# imprime em arquivo no diretorio  ~/Data/
#dfev <- data.frame(xev, evidencias)
#names(dfev) <- NULL
#setwd("../..")
#setwd("Data")
#sink("evid_real_flevoland_3_param_L_mu.txt")
#print(dfev)
#sink()
#setwd("..")
#setwd("Code/Code_r")
